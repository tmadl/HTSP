/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package htsp;

import htsp.solvers.TSPGrid;
import htsp.solvers.GoalPoint;
import htsp.solvers.RandomSolver;
import htsp.solvers.Solver;
import htsp.solvers.bruteforce.BruteForceSolver;
import htsp.solvers.concorde.ConcordeSolver;
import htsp.solvers.lida.Connection;
import htsp.solvers.lida.GoalObject;
import htsp.solvers.lida.GoalPath;
import htsp.solvers.lida.GridNode;
import htsp.solvers.lida.LIDASolverHierarchicalSIExhaustive;
//import htsp.solvers.lida.LIDASolverHierarchicalSIExhaustiveLowLevelOrdering;
import htsp.solvers.lida.LIDASolverInhibitingPERec;
import htsp.solvers.lida.PathConnector;
import java.awt.Color;
import java.awt.Graphics;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author madlt
 */
public class MainGui extends javax.swing.JFrame {

    private TspDrawer drawer, drawer2;
    private Solver optimalSolver;
    private LIDASolverHierarchicalSIExhaustive solver;
    private LIDASolverInhibitingPERec solver2;
    private ProgressUpdater progressUpdater;
    private List<GoalPoint> cUserGoals;

    private final String LIBTSPPATH = "libtsp", LIBTSPENDING = ".tsp", LIBTSPSOLUTIONENDING = ".opt.tour";

    /**
     * Creates new form MainGui
     */
    public MainGui() {
        initComponents();
        loadLibtsp();
        init();
    }

    private void loadLibtsp() {
        String path = LIBTSPPATH;

        String filename;
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();

        this.jCmbLibtsp.removeAllItems();
        this.jCmbLibtsp.addItem("");

        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                filename = listOfFiles[i].getName();
                if (filename.endsWith(LIBTSPENDING.toLowerCase()) || filename.endsWith(LIBTSPENDING.toUpperCase())) {
                    //System.out.println(filename);
                    this.jCmbLibtsp.addItem(filename.replace(LIBTSPENDING, ""));
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTxtNumber = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTxtCost = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTxtDrawnCost = new javax.swing.JTextField();
        jCmbLibtsp = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jChkAutocalc = new javax.swing.JCheckBox();
        jTxtX1 = new javax.swing.JTextField();
        jTxtY1 = new javax.swing.JTextField();
        jTxtX2 = new javax.swing.JTextField();
        jTxtY2 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jTxtThreshold = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jChkDbg = new javax.swing.JCheckBox();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPDraw = new javax.swing.JPanel()
        {
            public void paint(Graphics g)
            {
                super.paint(g);
                customPaint(g);
            }
        };
        jpDraw2 = new javax.swing.JPanel()
        {
            public void paint(Graphics g)
            {
                super.paint(g);
                customPaint2(g);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(165);
        jSplitPane1.setDividerSize(4);

        jButton1.setText("Initialize");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTxtNumber.setText("9");
        jTxtNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtNumberActionPerformed(evt);
            }
        });

        jButton2.setText("HTSP");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTxtCost.setEditable(false);
        jTxtCost.setText("0");
        jTxtCost.setPreferredSize(new java.awt.Dimension(12, 27));
        jTxtCost.setRequestFocusEnabled(false);
        jTxtCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtCostActionPerformed(evt);
            }
        });

        jButton3.setText("Clear All");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Solution cost");

        jLabel2.setText("Drawn p cost");

        jTxtDrawnCost.setEditable(false);
        jTxtDrawnCost.setText("0");
        jTxtDrawnCost.setPreferredSize(new java.awt.Dimension(12, 27));
        jTxtDrawnCost.setRequestFocusEnabled(false);
        jTxtDrawnCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtDrawnCostActionPerformed(evt);
            }
        });

        jCmbLibtsp.setEditable(true);
        jCmbLibtsp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCmbLibtsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbLibtspActionPerformed(evt);
            }
        });

        jButton4.setText("Load");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Solution");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("LibTSP");

        jButton6.setText("Cl P");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("BF");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Exp.Solv.");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jChkAutocalc.setText("Auto-calc gridS.");

        jTxtX1.setText("2");
        jTxtX1.setPreferredSize(new java.awt.Dimension(10, 20));
        jTxtX1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtX1ActionPerformed(evt);
            }
        });

        jTxtY1.setText("2");
        jTxtY1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtY1ActionPerformed(evt);
            }
        });

        jTxtX2.setText("3");

        jTxtY2.setText("3");

        jButton9.setText("C");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTxtThreshold.setText("0.25");
        jTxtThreshold.setPreferredSize(new java.awt.Dimension(10, 20));
        jTxtThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtThresholdActionPerformed(evt);
            }
        });

        jButton10.setText("T.");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("AT");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("TSP");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jChkDbg.setSelected(true);
        jChkDbg.setText("dbg");
        jChkDbg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChkDbgActionPerformed(evt);
            }
        });

        jButton13.setText("C");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("rnd");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("ri");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("mrg");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbLibtsp, 0, 159, Short.MAX_VALUE)
                            .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTxtDrawnCost, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                    .addComponent(jTxtCost, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jChkAutocalc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jChkDbg))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton13))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTxtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton7))
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jTxtThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTxtX1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTxtY1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTxtX2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTxtY2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton11))))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(22, 22, 22))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jChkAutocalc)
                    .addComponent(jChkDbg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton7)
                    .addComponent(jButton12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTxtDrawnCost, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtX1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtY1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtX2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtY2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(jButton15)
                    .addComponent(jButton16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton8)
                    .addComponent(jButton13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCmbLibtsp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jSplitPane2.setDividerLocation(320);

        jPDraw.setBackground(new java.awt.Color(255, 255, 255));
        jPDraw.setMinimumSize(new java.awt.Dimension(100, 100));
        jPDraw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPDrawMouseClicked(evt);
            }
        });
        jPDraw.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPDrawMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout jPDrawLayout = new javax.swing.GroupLayout(jPDraw);
        jPDraw.setLayout(jPDrawLayout);
        jPDrawLayout.setHorizontalGroup(
            jPDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );
        jPDrawLayout.setVerticalGroup(
            jPDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
        );

        jSplitPane2.setLeftComponent(jPDraw);

        jpDraw2.setBackground(new java.awt.Color(255, 255, 255));
        jpDraw2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpDraw2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpDraw2Layout = new javax.swing.GroupLayout(jpDraw2);
        jpDraw2.setLayout(jpDraw2Layout);
        jpDraw2Layout.setHorizontalGroup(
            jpDraw2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
        jpDraw2Layout.setVerticalGroup(
            jpDraw2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jpDraw2);

        jSplitPane1.setRightComponent(jSplitPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        init();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void init() {
        int MAXLEVELS = Integer.MAX_VALUE;
        int number = 10;
        try {
            number = Integer.parseInt(jTxtNumber.getText());
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Wrong number format!");
        }
        
        if (jChkAutocalc.isSelected()) {
            optimalSolver = new BruteForceSolver(TSPGrid.randomGoalPoints(number));
            solver = new LIDASolverHierarchicalSIExhaustive(optimalSolver.getGoalpoints(), MAXLEVELS);
            solver2 = new LIDASolverInhibitingPERec(optimalSolver.getGoalpoints());
        }
        else {
            optimalSolver = new BruteForceSolver(HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT, TSPGrid.randomGoals(number, HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT));
            solver = new LIDASolverHierarchicalSIExhaustive(HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT, optimalSolver.getGoalpoints(), MAXLEVELS);
            solver2 = new LIDASolverInhibitingPERec(HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT, optimalSolver.getGoalpoints());
        }

        drawer = new TspDrawer(jPDraw, solver.getWidth(), solver.getHeight());
        //cUserGoals = new ArrayList<GoalPoint>();
        cUserGoals = new ArrayList<GoalPoint>(Arrays.asList(optimalSolver.getGoalpoints()));
        drawer.setGoalpoints(solver.getGoalpoints());
        drawer.setPath(null);
        drawer.draw();
        solver.setTspDrawers(drawer, drawer2);
        solver2.setTspDrawer(drawer);
        optimalSolver.setTspDrawer(drawer);

        drawer2 = new TspDrawer(this.jpDraw2, solver.getWidth(1), solver.getHeight(1));
        drawer2.setGoalpoints(solver.getGoalpoints(1));
        drawer2.setPath(null);
        drawer2.draw();

        jProgressBar.setValue(0);
    }

    class ProgressUpdater extends Thread {        
        private boolean computing;
        private int updateInterval = 500;

        public ProgressUpdater() {
            computing = true;
        }

        public void run() {
            jProgressBar.setValue(0);
            while (computing) {
                double p = optimalSolver.getProgress();
                if (p<0) p = 0;
                if (p>100) p = 99;
                jProgressBar.setValue((int)p);
                try {
                    Thread.sleep(updateInterval);
                }
                catch (Exception ex) {}
            }
            jProgressBar.setValue(100);
        }

        public void stopComputing() {
            computing = false;
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (path != null) path.clear();

        drawer = new TspDrawer(jPDraw, solver.getWidth(), solver.getHeight());
        drawer.setGoalpoints(solver.getGoalpoints());
        drawer.setPath(null);
        drawer.draw();
        solver.setTspDrawers(drawer, drawer2);

        drawer2 = new TspDrawer(jpDraw2, solver.getWidth(1), solver.getHeight(1));
        drawer2.setGoalpoints(solver.getGoalpoints(1));
        drawer2.setPath(null);
        drawer2.draw();

        jProgressBar.setValue(0);
        progressUpdater = new ProgressUpdater();
        progressUpdater.start();

        SwingWorker<Double, Void> worker = new SwingWorker<Double, Void>() {
          @Override
          public Double doInBackground() {
            Double cost = solver.solve();
            return cost;
          }

          @Override
          protected void done() {
            try {
                double cost = get();
                jTxtCost.setText(Double.toString(((int)(cost*100))/100.0));
                drawer.setPath(solver.getSolutionPath(0));
                drawer2.setPath(solver.getSolutionPath(1));
                //jTxtCost.setText(Double.toString((int)(TSPGrid.pathDistance(solver.getGoalpoints(), solver.getSolutionPath())*100)/100.0));
                drawer.draw();
                drawer2.draw();

                if (progressUpdater != null) progressUpdater.stopComputing();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
          }
        };
        worker.execute();

        /*double cost = solver.solve();
        jTxtCost.setText(Double.toString(((int)(cost*100))/100.0));
        drawer.setPath(solver.getSolutionPath(0));
        drawer2.setPath(solver.getSolutionPath(1));
        //jTxtCost.setText(Double.toString((int)(TSPGrid.pathDistance(solver.getGoalpoints(), solver.getSolutionPath())*100)/100.0));
        drawer.draw();
        drawer2.draw();
        if (progressUpdater != null) progressUpdater.stopComputing();*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTxtCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtCostActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        GoalPoint[] scale = new GoalPoint[] {new GoalPoint(0, 0), new GoalPoint(HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT)};
        GoalPoint[] scale2 = new GoalPoint[] {new GoalPoint(12, 12)};
        GoalPoint[] empty = new GoalPoint[] {};
        cUserGoals = new ArrayList<GoalPoint>();
        optimalSolver.init(scale);
        solver.init(scale2);
        drawer.clear();
        drawer.setGoalpoints(empty);
        drawer.setSize(solver.getWidth(), solver.getHeight());
        solver.init(empty);
        optimalSolver.init(empty);
        drawer.draw();

        drawer2.clear();
        drawer2.setGoalpoints(empty);
        drawer2.setSize(solver.getWidth(1), solver.getHeight(1));
        drawer2.draw();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jPDrawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPDrawMouseClicked
        if (SwingUtilities.isLeftMouseButton(evt)) {
            int mx = evt.getX(), my = evt.getY();
            int nx = drawer.transformX(mx, false), ny = drawer.transformY(my, false);
            //JOptionPane.showMessageDialog(null, nx+" "+ny);
            GoalPoint n = new GoalPoint(nx, ny);
            if (!cUserGoals.contains(n)) {
                cUserGoals.add(n);
                int size = cUserGoals.size();
                GoalPoint[] result = new GoalPoint[size];
                cUserGoals.toArray(result);
                optimalSolver.init(result);
                solver.init(result);
                solver2.init(result);
                drawer.setPath(null);
                drawer.setGoalpoints(solver.getGoalpoints());
                drawer.draw();

                drawer2.clear();
                drawer2.setPath(null);
                drawer2.setGoalpoints(solver.getGoalpoints(1));
                drawer2.setSize(solver.getWidth(1), solver.getHeight(1));
                drawer2.draw();
            }
        }
        else if (SwingUtilities.isMiddleMouseButton(evt)) {
            int mx = evt.getX(), my = evt.getY();
            int nx = drawer.transformX(mx, false), ny = drawer.transformY(my, false);
            GoalPoint gp = solver.getGoalPoint(nx, ny);
            JOptionPane.showMessageDialog(null, gp.getColor()+"\n"+TspDrawer.getActivationFromColor(gp.getColor())+"\n"+solver.getNode(0, nx, ny));
        }
    }//GEN-LAST:event_jPDrawMouseClicked

    private void jPDrawMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPDrawMouseDragged
        if (SwingUtilities.isRightMouseButton(evt)) {
            int mx = evt.getX(), my = evt.getY();
            int nx = drawer.transformX(mx, false), ny = drawer.transformY(my, false);
            //JOptionPane.showMessageDialog(null, nx+" "+ny);
            drawer.addPx(mx, my);
            List<GoalPoint> cGoals = drawer.getCustomGoals();
            GoalPoint n = new GoalPoint(nx, ny);
            if (!cGoals.contains(n) && solver.getGoalPoint(nx, ny) != null && solver.getGoalPoint(nx, ny).isMarked()) {
                drawer.addCustomGoal(n);
                jTxtDrawnCost.setText(Double.toString((int)(TSPGrid.goalPathDistance(cGoals)*100)/100.0));
                drawer.draw();
            }
        }
    }//GEN-LAST:event_jPDrawMouseDragged

    private void jTxtDrawnCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtDrawnCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtDrawnCostActionPerformed

    private void jCmbLibtspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbLibtspActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbLibtspActionPerformed


    GoalPoint[] cGoals;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (this.jCmbLibtsp.getSelectedItem().toString().length()>1) {
            cGoals = LibTSPLoader.loadLibtspData(LIBTSPPATH + "/" + this.jCmbLibtsp.getSelectedItem().toString() + LIBTSPENDING);
            if (cGoals != null) {
                solver.init(cGoals);
                solver2.init(cGoals);
                optimalSolver.init(cGoals);
                drawer.setSize(solver.getWidth(), solver.getHeight());
                drawer.setGoalpoints(solver.getGoalpoints());
                drawer.setPath(null);
                drawer.draw();

                drawer2.setSize(solver.getWidth(1), solver.getHeight(1));
                drawer2.setGoalpoints(solver.getGoalpoints(1));
                drawer2.setPath(null);
                drawer2.draw();
            }
            else {
                JOptionPane.showMessageDialog(null, "Failed to read "+this.jCmbLibtsp.getSelectedItem().toString());
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (this.jCmbLibtsp.getSelectedItem().toString().length()>1) {
            List<Integer> path = LibTSPLoader.loadLibtspSolution(LIBTSPPATH + "/" + this.jCmbLibtsp.getSelectedItem().toString() + LIBTSPSOLUTIONENDING);
            drawer.setGoalpoints(cGoals);
            drawer.setPath(path);
            drawer.draw();
            double cost = TSPGrid.pathDistance(solver.getGoalpoints(), path);
            jTxtCost.setText(Double.toString((int)(cost*100)/100.0));
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        drawer.clear();
        drawer.draw();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTxtNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtNumberActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (optimalSolver.getGoalpoints().length > 12) {
            JOptionPane.showMessageDialog(null, optimalSolver.getGoalpoints().length+" points - brute force would take too long. Use Concorde solver");
            return;
        }

        drawer = new TspDrawer(jPDraw, optimalSolver.getWidth(), optimalSolver.getHeight());
        drawer.setGoalpoints(optimalSolver.getGoalpoints());
        drawer.setPath(null);
        drawer.draw();
        optimalSolver.setTspDrawer(drawer);

        jProgressBar.setValue(0);
        progressUpdater = new ProgressUpdater();
        progressUpdater.start();

        SwingWorker<Double, Void> worker = new SwingWorker<Double, Void>() {
          @Override
          public Double doInBackground() {
            Double cost = optimalSolver.solve();
            return cost;
          }

          @Override
          protected void done() {
            try {
                double cost = get();
                jTxtCost.setText(Double.toString(((int)(cost*100))/100.0));
                drawer.setPath(optimalSolver.getSolutionPath());
                jTxtCost.setText(Double.toString((int)(TSPGrid.pathDistance(optimalSolver.getGoalpoints(), optimalSolver.getSolutionPath())*100)/100.0));
                drawer.draw();
                progressUpdater.stopComputing();
            } catch (Exception ignore) {
            }
          }
        };
        worker.execute();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        //TSPGrid.exportGoals(optimalSolver.getGoalpoints(), "asdf.tsp");
        TSPGrid.exportGoals(optimalSolver.getGoalpoints(), ConcordeSolver.tsppath);
        Solver cs = new ConcordeSolver();
        JOptionPane.showMessageDialog(null, cs.solve());
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTxtX1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtX1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtX1ActionPerformed

    private void jTxtY1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtY1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtY1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        try {
            x1 = Integer.parseInt(jTxtX1.getText());
            y1 = Integer.parseInt(jTxtY1.getText());
            x2 = Integer.parseInt(jTxtX2.getText());
            y2 = Integer.parseInt(jTxtY2.getText());
        }
        catch (Exception ex) {}
        Connection c = solver.getConnection(x1, y1, x2, y2);
        if (c != null)
            JOptionPane.showMessageDialog(null, "Connection ("+c.getWeight()+") from "+c.getSource()+" to "+c.getSink());
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTxtThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtThresholdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtThresholdActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        double threshold = 0;
        try {
            threshold = Double.parseDouble(jTxtThreshold.getText());
        }
        catch (Exception ex) {ex.printStackTrace();}
        thresholdLayer(0, threshold);
        thresholdLayer(1, threshold);
    }//GEN-LAST:event_jButton10ActionPerformed

    protected void thresholdLayer(int layer, double threshold) {
        for (int i = 0; i < solver.getGrid(layer).getWidth(); i++) {
            for (int j = 0; j < solver.getGrid(layer).getHeight(); j++) {
                if (solver.getGrid(layer).getNode(i, j).getActivation() < threshold)
                    solver.getNode(layer, i, j).setActivation(0);
            }
        }
        drawer2 = new TspDrawer(jpDraw2, solver.getWidth(1), solver.getHeight(1));
        drawer2.setGoalpoints(solver.getGoalpoints(1));
        drawer2.setPath(null);
        drawer2.draw();

        drawer = new TspDrawer(jPDraw, solver.getWidth(0), solver.getHeight(0));
        drawer.setGoalpoints(solver.getGoalpoints(0));
        drawer.setPath(null);
        drawer.draw();
    }

    private void jpDraw2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpDraw2MouseClicked
        if (SwingUtilities.isMiddleMouseButton(evt)) {
            int mx = evt.getX(), my = evt.getY();
            int nx = drawer2.transformX(mx, false), ny = drawer2.transformY(my, false);
            String str = solver.getNode(1, nx, ny)+"\n";
            if (!solver.getNode(1, nx, ny).getContent().isEmpty())
                str+=((GoalObject)solver.getNode(1, nx, ny).getContent().get(0)).toString();
            JOptionPane.showMessageDialog(null, str);
        }
    }//GEN-LAST:event_jpDraw2MouseClicked

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        List<GridNode> nodes = solver.getGrid(1).getNodes();
        Collections.sort(nodes);
        int goaln = solver.getOriginalGoals().length;
        thresholdLayer(1, nodes.get(nodes.size() - goaln).getActivation());
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        drawer = new TspDrawer(jPDraw, solver2.getWidth(), solver2.getHeight());
        drawer.setGoalpoints(solver2.getGoalpoints());
        drawer.setPath(null);
        //drawer.draw();
        solver.setTspDrawers(drawer, drawer2);
        solver2.setTspDrawer(drawer);

        /*drawer2 = new TspDrawer(jpDraw2, solver2.getWidth(), solver2.getHeight());
        drawer2.setGoalpoints(solver2.getGoalpoints());
        drawer2.setPath(null);
        drawer2.draw();*/

        jProgressBar.setValue(0);
        progressUpdater = new ProgressUpdater();
        progressUpdater.start();

        SwingWorker<Double, Void> worker = new SwingWorker<Double, Void>() {
          @Override
          public Double doInBackground() {
            Double cost = solver2.solve();
            return cost;
          }

          @Override
          protected void done() {
            try {
                double cost = get();
                jTxtCost.setText(Double.toString(((int)(cost*100))/100.0));
                drawer.setPath(solver2.getSolutionPath());
                //jTxtCost.setText(Double.toString((int)(TSPGrid.pathDistance(solver.getGoalpoints(), solver.getSolutionPath())*100)/100.0));
                drawer.setGoalpoints(solver2.getGoalpoints());
                drawer.draw();
                //drawer2.draw();
                if (progressUpdater != null) progressUpdater.stopComputing();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
          }
        };
        worker.execute();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jChkDbgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChkDbgActionPerformed
        GoalPath.debugging = jChkDbg.isSelected();
    }//GEN-LAST:event_jChkDbgActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        Color[] colors = new Color[] {Color.CYAN, Color.MAGENTA, Color.ORANGE, Color.red, Color.green, Color.blue, Color.black, Color.pink, Color.yellow, Color.darkGray, Color.lightGray};
        int c = 0;
        //if (GoalPath.debugging)
        {
            for (int i = 0; i < solver.getGrid(1).getGoalObjects().length; i++) {
                drawer2.drawCircle(solver.getGrid(1).getGoalObjects()[i].getCurrentX(), solver.getGrid(1).getGoalObjects()[i].getCurrentY(), colors[c], drawer2.getGoalSize()+4);
                for (GoalObject go : solver.getGrid(1).getGoalObjects()[i].getSubGoalObjects()) {
                    drawer.drawCircle(go.getCurrentX(), go.getCurrentY(), colors[c], drawer.getGoalSize()+4);
                }
                c++;
            }
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    Solver s;
    List<Integer> path;
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed

        int number = 10;
        try {
            number = Integer.parseInt(jTxtNumber.getText());
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Wrong number format!");
        }

        if (jChkAutocalc.isSelected()) {
            s = new RandomSolver(TSPGrid.randomGoalPoints(number));
        }
        else {
            s = new RandomSolver(HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT, TSPGrid.randomGoals(number, HTSP.DEFAULTWIDTH, HTSP.DEFAULTHEIGHT));
        }

        double cost = s.solve();
        path = s.getSolutionPath();

        drawer = new TspDrawer(jPDraw, optimalSolver.getWidth(), optimalSolver.getHeight());
        drawer.setGoalpoints(s.getGoalpoints());
        drawer.setPath(s.getSolutionPath());
        drawer.draw();
        jTxtCost.setText(Double.toString(((int)(cost*100))/100.0));

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        //Solver os = solver;
        Solver os = s;
        
        drawer = new TspDrawer(jPDraw, os.getWidth(), os.getHeight());
        drawer.setGoalpoints(os.getGoalpoints());

        if (path == null || path.isEmpty())
            path = os.getSolutionPath();
        
        List<GoalObject> goals = new ArrayList<GoalObject>();
        int i = 0;
        for (Integer pi : path) {
            GoalPoint gp = os.getGoalpoints()[pi.intValue()];
            goals.add(new GoalObject(gp.getX(), gp.getY(), pi.intValue()));
        }
        List<GoalObject> newGoals = goals = PathConnector.removeIntersection(goals);
        List<Integer> newpath = new ArrayList<Integer>();
        for (GoalObject go : newGoals) {
            newpath.add(go.getOrderNumber());
        }
        path = newpath;
        drawer.setPath(path);
        drawer.draw();
        double cost = TSPGrid.pathDistance(os.getGoalpoints(), path);
        jTxtCost.setText(Double.toString(((int)(cost*100))/100.0));
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        path = drawer.getPath();
        
        List<GoalObject> goals = new ArrayList<GoalObject>();
        for (Integer pi : path) {
            GoalPoint gp = solver.getGoalpoints()[pi.intValue()];
            goals.add(new GoalObject(gp.getX(), gp.getY(), pi.intValue()));
        }
        List<GoalObject> customGoals = new ArrayList<GoalObject>();
        int i = 0;
        for (GoalPoint gp : this.cUserGoals) {
            goals.add(new GoalObject(gp.getX(), gp.getY(), i++));
        }
        List<GoalObject> newGoals =  PathConnector.mergePaths(goals, customGoals, 5);
        List<Integer> newpath = new ArrayList<Integer>();
        for (GoalObject go : newGoals) {
            newpath.add(go.getOrderNumber());
        }
        path = newpath;
        drawer.setPath(path);
        drawer.draw();
    }//GEN-LAST:event_jButton16ActionPerformed
    
    private void customPaint(Graphics g) {
        drawer.draw(g);
    }

    private void customPaint2(Graphics g) {
        drawer2.draw(g);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jChkAutocalc;
    private javax.swing.JCheckBox jChkDbg;
    private javax.swing.JComboBox jCmbLibtsp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPDraw;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTextField jTxtCost;
    private javax.swing.JTextField jTxtDrawnCost;
    private javax.swing.JTextField jTxtNumber;
    private javax.swing.JTextField jTxtThreshold;
    private javax.swing.JTextField jTxtX1;
    private javax.swing.JTextField jTxtX2;
    private javax.swing.JTextField jTxtY1;
    private javax.swing.JTextField jTxtY2;
    private javax.swing.JPanel jpDraw2;
    // End of variables declaration//GEN-END:variables
}
